import console from "../modules/console.js";
console.info("Initialization done.");
import createCommit from "../modules/createCommit.js";
import yamlModule from "../modules/yamlModule.js";
import fs from "fs";
import path from "path";
import { startGroup, endGroup, exportVariable } from "@actions/core";
import { maxSatisfying } from "semver";
import { createIssue } from "../modules/octokit.js";
import exec from "../modules/exec.js";
import modulePath from "../modules/modulePath.js";
import jsonModule from "../modules/jsonModule.js";

const labels = ["ci:prefetch"];

const prefetchTargetsPath = "scripts/prefetch/targets.yaml";
/**
 * @type {{ type: "npm", moduleName: string, gadget: { name: string, fileName: string }, distFilePath: string, version?: string, appendCode?: string, }[]}
 */
const prefetchTargets = await yamlModule.readFile(prefetchTargetsPath);
startGroup("prefetchTargets:");
console.info(prefetchTargets);
endGroup();
exec("npm config get registry --global").then((output) => console.info("npm config get registry --global:", output));
const registryBaseUrl = (await exec("npm config get registry --global")).trim();
const fileList = [];
for (const prefetchTarget of prefetchTargets) {
    console.info("target:", prefetchTarget);
    const { type, moduleName, gadget: { name, fileName }, distFilePath, version, appendCode } = prefetchTarget;
    const file = path.join("src/gadgets", name, fileName);
    fileList.push(file);
    console.info(`[${name}]`, "Start to fetch...");
    const data = await (async () => {
        if (type === "npm") {
            const packageName = `${moduleName}${typeof version === "string" ? `@${version}` : ""}`;
            const filePath = path.posix.join("npm", packageName, distFilePath);
            const url = new URL(filePath, "https://cdn.jsdelivr.net/");
            console.info(`[${name}]`, `url: ${url}`);
            const response = await fetch(url, {
                method: "GET",
            });
            return await response.text();
        }
    })();
    console.info(`[${name}]`, "Successfully fetched.");
    const code = [
        "/**",
        ` * Generated by ${modulePath(import.meta)}`,
        " * Options:",
    ];
    for (const [k, v] of Object.entries(prefetchTarget)) {
        code.push(` *     ${k}: ${JSON.stringify(v, null, 1).replace(/\n */g, " ")}`);
    }
    code.push(" */", data);
    if (typeof appendCode === "string") {
        code.push(appendCode);
    }
    code.push("");
    if (await fs.promises.readFile(file, { encoding: "utf-8" }) === code.join("\n")) {
        console.info(`[${name}]`, "Nothing changed, continue.");
        continue;
    }
    const folder = path.dirname(file);
    const filename = path.basename(file);
    const eslintrcName = path.join(folder, ".eslintrc.yaml");
    await fs.promises.mkdir(folder, {
        recursive: true,
    });
    await fs.promises.writeFile(file, code.join("\n"));
    if (path.extname(file) === ".js") {
        const eslintrc = await jsonModule.readFile(eslintrcName).catch(() => ({}));
        if (!Array.isArray(eslintrc.ignorePatterns)) {
            eslintrc.ignorePatterns = [];
        }
        if (!eslintrc.ignorePatterns.includes(filename)) {
            eslintrc.ignorePatterns.push(filename);
            await jsonModule.writeFile(eslintrcName, eslintrc);
        }
    }
    console.info(`[${name}]`, "wrote the code file and eslintrc successfully.");
    const registryUrl = `${new URL(moduleName, registryBaseUrl)}`;
    console.info(`[${name}]`, "Start to fetch the package info:", registryUrl);
    const packageInfoResponse = await fetch(registryUrl, {
        method: "GET",
    });
    const packageInfo = await packageInfoResponse.json();
    startGroup("Successfully get the package info:");
    console.info(packageInfo);
    endGroup();
    const distVersions = Object.keys(packageInfo.versions);
    console.info(`[${name}]`, "distVersions:", distVersions);
    const targetVersion = maxSatisfying(distVersions, version || "*");
    console.info(`[${name}]`, "targetVersion:", targetVersion);
    await createCommit(`auto(Gadget-${name}): bump ${moduleName} to ${targetVersion} by prefetch`);
    if (packageInfo["dist-tags"].latest !== targetVersion) {
        await createIssue(
            `[prefetch] Found new verion ${moduleName}@${packageInfo["dist-tags"].latest} higher than ${targetVersion}`,
            `Found new verion \`${moduleName}@${packageInfo["dist-tags"].latest}\` higher than \`${targetVersion}\`, while [\`${prefetchTargetsPath}\`](${prefetchTargetsPath}) configured as \`${moduleName}@${version || "*"}\`, please consider to upgrade it: ${new URL(path.posix.join("package", name), "https://www.npmjs.com/")}`,
            labels,
        );
    }
}
exportVariable("linguist-generated-prefetch", JSON.stringify(fileList));
console.info("Done.");
